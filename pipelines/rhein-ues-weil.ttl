@base <http://opendatabs.github.com/ld-pipeline/rhein-ues-weil/>.
@prefix p: <https://pipeline.described.at/>.
@prefix code: <https://code.described.at/>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.

<defaultVars>
  p:variable [ a p:Variable;
    p:name "ENDPOINT_URL";
    p:value "http://localhost:3030/data"
  ], [ a p:Variable;
    p:name "ENDPOINT_USER";
    p:value "admin"
  ], [ a p:Variable;
    p:name "ENDPOINT_PASSWORD";
    p:value "test"
  ], [ a p:Variable;
    p:name "FTP_HOST";
    p:value "localhost"
  ], [ a p:Variable;
    p:name "FTP_USER";
    p:value "admin"
  ], [ a p:Variable;
    p:name "FTP_PASSWORD";
    p:value "test"
  ], [ a p:Variable;
    p:name "observer";
    p:value "https://ld.bs.ch/object/rhein-ues-weil"
  ].

<defaultVarsCorrected>
  p:variable [ a p:Variable;
    p:name "filename";
    p:value "onlinedaten/korrigiert/online-korrigiert.csv"
  ], [ a p:Variable;
    p:name "csvMapping";
    p:value "input/rhein-ues-weil/corrected.csv-metadata.json"
  ], [ a p:Variable;
    p:name "graph";
    p:value "https://ld.bs.ch/graph/rhein-ues-weil"
  ].

<defaultVarsRaw>
  p:variable [ a p:Variable;
    p:name "ftpInputPathname";
    p:value "onlinedaten/roh/archiv_sql/"
  ], [ a p:Variable;
    p:name "ftpArchivePathname";
    p:value "onlinedaten/roh/archiv_lod/"
  ], [ a p:Variable;
    p:name "csvMapping";
    p:value "input/rhein-ues-weil/raw.csv-metadata.json"
  ], [ a p:Variable;
    p:name "graph";
    p:value "https://ld.bs.ch/graph/rhein-ues-weil-raw"
  ].

<defaultVarsStatic>
  p:variable [ a p:Variable;
    p:name "filename";
    p:value "input/rhein-ues-weil/static.ttl"
  ], [ a p:Variable;
    p:name "graph";
    p:value "https://ld.bs.ch/graph/rhein-ues-weil-static"
  ].

<stdoutCorrected> a p:Pipeline, p:Readable;
  p:variables <defaultVars>, <defaultVarsCorrected>;
  p:steps [
    p:stepList (
      <readCsv>
      <parseCsv>
      <removeCsvwTriples>
      <toDataset>
      <toObservation>
      <flatten>
      <serialize>
    )
  ].

<storeCorrected> a p:Pipeline;
  p:variables <defaultVars>, <defaultVarsCorrected>;
  p:steps [
    p:stepList (
      <readCsv>
      <parseCsv>
      <removeCsvwTriples>
      <toDataset>
      <toObservation>
      <flatten>
      <setGraph>
      <upload>
    )
  ].

<stdoutRaw> a p:Pipeline, p:Readable;
  p:variables <defaultVars>, <defaultVarsRaw>;
  p:steps [
    p:stepList (
      <listCsvFiles>
      <forEachCsvFile>
      <serialize>
    )
  ].

<storeRaw> a p:Pipeline;
  p:variables <defaultVars>, <defaultVarsRaw>;
  p:steps [
    p:stepList (
      <listCsvFiles>
      <forEachCsvFile>
      <setGraph>
      <upload>
    )
  ].

<stdoutStatic> a p:Pipeline, p:Readable;
  p:variables <defaultVars>, <defaultVarsStatic>;
  p:steps [
    p:stepList (
      <readTurtle>
      <parseTurtle>
      <serialize>
    )
  ].

<storeStatic> a p:Pipeline;
  p:variables <defaultVars>, <defaultVarsStatic>;
  p:steps [
    p:stepList (
      <readTurtle>
      <parseTurtle>
      <setGraph>
      <upload>
    )
  ].

<listCsvFiles> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-ftp/list.js>
  ];
  code:arguments [
    code:name "protocol";
    code:value "ftp"
  ], [
    code:name "host";
    code:value "FTP_HOST"^^p:VariableName
  ], [
    code:name "user";
    code:value "FTP_USER"^^p:VariableName
  ], [
    code:name "password";
    code:value "FTP_PASSWORD"^^p:VariableName
  ], [
    code:name "pathname";
    code:value "ftpInputPathname"^^p:VariableName
  ].

<forEachCsvFile> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-core#forEach>
  ];
  code:arguments (<readCsvTriples> "filename").

<readCsvTriples> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readCsv>
      <parseCsv>
      <removeCsvwTriples>
      <toDataset>
      <toObservation>
      <flatten>
      <move>
    )
  ].

<readCsv> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-ftp/read.js>
  ];
  code:arguments [
    code:name "protocol";
    code:value "ftp"
  ], [
    code:name "host";
    code:value "FTP_HOST"^^p:VariableName
  ], [
    code:name "user";
    code:value "FTP_USER"^^p:VariableName
  ], [
    code:name "password";
    code:value "FTP_PASSWORD"^^p:VariableName
  ], [
    code:name "filename";
    code:value "filename"^^p:VariableName
  ].

<readTurtle> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("filename"^^p:VariableName).

<parseCsv> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats/csvw.js#parse>
  ];
  code:arguments (<parseMetadata>).

<parseTurtle> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats/n3.js#parse>
  ];
  code:arguments (<parseMetadata>).

<removeCsvwTriples> a p:Step ;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#filter>
  ];
  code:arguments ([ a code:EcmaScript;
    code:link <file:../lib/isNotCsvwTriple.js>
  ]).

<toDataset> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:rdf-stream-to-dataset-stream/bySubject.js>
  ].

<toObservation> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-rdf/cube.js#toObservation>
  ];
  code:arguments [
    code:name "observer";
    code:value "observer"^^p:VariableName
  ].

<flatten> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-base#flatten>;
  ].

<move> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-ftp/move.js>
  ];
  code:arguments [
    code:name "protocol";
    code:value "ftp"
  ], [
    code:name "host";
    code:value "FTP_HOST"^^p:VariableName
  ], [
    code:name "user";
    code:value "FTP_USER"^^p:VariableName
  ], [
    code:name "password";
    code:value "FTP_PASSWORD"^^p:VariableName
  ], [
    code:name "source";
    code:value "filename"^^p:VariableName
  ], [
    code:name "target";
    code:value "${ftpArchivePathname}${filename.split('/').slice(-1)[0]}"^^code:EcmaScriptTemplateLiteral
  ].

<serialize> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats/ntriples.js#serialize>
  ].

<parseMetadata> a p:Pipeline, p:ReadableObjectMode;
  p:steps [
    p:stepList (
      <readMetadataJson>
      <parseMetadataJson>
    )
  ].

<readMetadataJson> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:fs#createReadStream>
  ];
  code:arguments ("csvMapping"^^p:VariableName).

<parseMetadataJson> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-formats/jsonld.js#parse>
  ].

<setGraph> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-rdf/setGraph.js>
  ];
  code:arguments ("graph"^^p:VariableName).

<upload> a p:Step;
  code:implementedBy [ a code:EcmaScript;
    code:link <node:barnard59-graph-store#put>
  ];
  code:arguments [
    code:name "endpoint";
    code:value "ENDPOINT_URL"^^p:VariableName
  ], [
    code:name "user";
    code:value "ENDPOINT_USER"^^p:VariableName
  ], [
    code:name "password";
    code:value "ENDPOINT_PASSWORD"^^p:VariableName
  ].
